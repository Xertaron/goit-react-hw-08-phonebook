{"version":3,"file":"static/js/383.e9ff634a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/Form/ContactForm.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContactsFilter = state => state.filters.filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectContactsFilter,\n} from '../../redux/contacts/selectors';\nimport { Box } from '@chakra-ui/react';\nimport { Button, List, ListItem, ListIcon } from '@chakra-ui/react';\nimport { MdSettings } from 'react-icons/md';\n\nexport function ContactList() {\n  const contacts = useSelector(selectContacts);\n\n  const filterValue = useSelector(selectContactsFilter).toLowerCase();\n\n  const dispatch = useDispatch();\n\n  const handleDelete = contact => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  const getVisibilityContacts = () => {\n    if (!filterValue || filterValue === '') {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue)\n    );\n  };\n\n  const visibilityContacts = getVisibilityContacts();\n\n  return (\n    <Box\n      maxW=\"400px\"\n      mt={1}\n      bgGradient={[\n        'linear(to-tr, #F5F5F5, #ECECEC)',\n        'linear(to-t, #ECECEC, #DCDCDC)',\n        'linear(to-b, #DCDCDC, #F0F0F0)',\n      ]}\n      height=\"auto\"\n      borderRadius=\"5px\"\n      boxShadow=\"dark-lg\"\n      p=\"6\"\n      rounded=\"md\"\n    >\n      <List>\n        {visibilityContacts.map(contact => (\n          <ListItem key={contact.id}>\n            <ListIcon as={MdSettings} color=\"green.500\" />\n            {contact.name}: <span>{contact.number}</span>\n            <Button\n              colorScheme=\"teal\"\n              variant=\"ghost\"\n              onClick={() => handleDelete(contact)}\n            >\n              Delete\n            </Button>\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n}\n","import { useDispatch } from 'react-redux';\nimport { setFilterContacts } from '../../redux/contacts/filterSlice';\nimport { Box } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\nimport { ContactList } from 'components/Contacts/Contacts';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n\n  const handlerFilter = evt => {\n    dispatch(setFilterContacts(evt.target.value));\n  };\n\n  return (\n    <Box\n      maxW=\"600px\"\n      mx=\"auto\"\n      mt={1}\n      bgGradient={[\n        'linear(to-tr, #FFFFFF, #E0E0E0)',\n        'linear(to-t, #E0E0E0, #D3D3D3)',\n        'linear(to-b, #D3D3D3, #F2F2F2)',\n      ]}\n      height=\"auto\"\n      borderRadius=\"5px\"\n      boxShadow=\"dark-lg\"\n      p=\"6\"\n      rounded=\"md\"\n    >\n      <label>\n        Find contact by the name\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          onChange={handlerFilter}\n          placeholder=\"Search Contact\"\n        />\n      </label>\n      <ContactList />\n    </Box>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from '../../redux/contacts/operations.jsx';\nimport { selectContacts } from '../../redux/contacts/selectors.jsx';\nimport { Box, Button } from '@mui/material';\nimport TextField from '@mui/material/TextField';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const inputChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'number':\n        setNumber(event.target.value);\n        break;\n      default:\n        console.log('er');\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isContactRepeat = contacts.find(el => el.name === name);\n\n    if (isContactRepeat) {\n      alert('Already in Contacts');\n      return;\n    }\n    const contact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(contact));\n\n    event.target.reset();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      autoComplete=\"off\"\n      onSubmit={handleSubmit}\n      sx={{\n        paddingBottom: '20px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '10px',\n      }}\n    >\n      <TextField\n        sx={{ width: 400 }}\n        id=\"filled-basic\"\n        label=\"Name\"\n        variant=\"filled\"\n        type=\"text\"\n        name=\"name\"\n        onChange={inputChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <TextField\n        sx={{ width: 400 }}\n        id=\"filled-basic\"\n        label=\"Number\"\n        variant=\"filled\"\n        type=\"number\"\n        name=\"number\"\n        onChange={inputChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <Button\n        sx={{\n          height: 45,\n          width: 140,\n          mt: '20px',\n          color: 'white',\n          backgroundColor: '#006064',\n          borderRadius: '15px',\n          '&:hover:not(.active)': {\n            color: '#84ffff',\n            backgroundColor: '#006064',\n          },\n        }}\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/Form/ContactForm';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      display=\"flex\"\n      gridTemplateColumns=\"1fr 1fr\"\n      mt={1}\n      bgGradient={[\n        'linear(to bottom, #F8F8F8, #E8E8E8)',\n        'linear(to top, #E8E8E8, #F8F8F8)',\n      ]}\n    >\n      <ContactForm />\n\n      <Filter />\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectContactsFilter","filters","filter","ContactList","useSelector","filterValue","toLowerCase","dispatch","useDispatch","visibilityContacts","contact","name","includes","_jsx","Box","maxW","mt","bgGradient","height","borderRadius","boxShadow","p","rounded","children","List","map","_jsxs","ListItem","ListIcon","as","MdSettings","color","number","Button","colorScheme","variant","onClick","deleteContact","id","handleDelete","Filter","mx","Input","type","onChange","evt","setFilterContacts","target","value","placeholder","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","inputChange","event","console","log","component","autoComplete","onSubmit","preventDefault","find","el","alert","addContact","reset","sx","paddingBottom","display","flexDirection","justifyContent","alignItems","gap","TextField","width","label","pattern","title","required","backgroundColor","useEffect","fetchContacts","gridTemplateColumns"],"sourceRoot":""}