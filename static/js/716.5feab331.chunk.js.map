{"version":3,"file":"static/js/716.5feab331.chunk.js","mappings":"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","sources":["components/Form/Auth/RegisterForm.jsx","pages/Register/Register.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Box } from '@chakra-ui/react';\nimport { Input } from '@chakra-ui/react';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Box\n      maxW=\"500px\"\n      mx=\"auto\"\n      mt={20}\n      bgGradient={[\n        'linear(to-tr, gray.400, gray.200)',\n        'linear(to-t, gray.200, gray.100)',\n        'linear(to-b, gray.100, gray.300)',\n      ]}\n      height={450}\n      borderRadius=\"5px\"\n      boxShadow=\"dark-lg\"\n      p=\"6\"\n      rounded=\"md\"\n    >\n      <h1>Register</h1>\n      <form\n        onSubmit={handleSubmit}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n\n          padding: 15,\n        }}\n      >\n        <label\n          style={{ display: 'flex', flexDirection: 'column', marginTop: 10 }}\n        >\n          First name <i style={{ fontSize: 12 }}>(5 - 12 chars)</i>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            pattern=\"\\w{5,12}\"\n            outline=\"1px solid purple\"\n          />\n        </label>\n\n        <label\n          style={{ display: 'flex', flexDirection: 'column', marginTop: 10 }}\n        >\n          Email\n          <Input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"email\"\n            outline=\"1px solid purple\"\n          />\n        </label>\n        <label\n          style={{ display: 'flex', flexDirection: 'column', marginTop: 10 }}\n        >\n          Password <i style={{ fontSize: 12 }}>(5 - 12 chars)</i>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            outline=\"1px solid purple\"\n          />\n        </label>\n        <div\n          type=\"submit\"\n          style={{ marginTop: 20, display: 'flex', justifyContent: 'center' }}\n        >\n          <Box\n            as=\"button\"\n            color=\"white\"\n            fontWeight=\"bold\"\n            borderRadius=\"md\"\n            bgGradient=\"linear(to-r, purple.500, red.500)\"\n            w=\"300px\"\n            h=\"50px\"\n            _hover={{\n              bgGradient: 'linear(to-r, blue.500, pink.500)',\n            }}\n          >\n            Send\n          </Box>\n        </div>\n      </form>\n    </Box>\n  );\n};\n","import { RegisterForm } from 'components/Form/Auth/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["RegisterForm","dispatch","useDispatch","_jsxs","Box","maxW","mx","mt","bgGradient","height","borderRadius","boxShadow","p","rounded","children","_jsx","onSubmit","evt","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","style","display","flexDirection","padding","marginTop","fontSize","Input","type","placeholder","pattern","outline","justifyContent","as","color","fontWeight","w","h","_hover","_createContext","createContext","errorMessage","_createContext2","_slicedToArray","FormControlStylesProvider","useFormControlStyles","_createContext3","strict","_createContext4","FormControlProvider","useFormControlContext","FormControl","forwardRef","props","ref","styles","useMultiStyleConfig","_useFormControlProvid","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","_objectWithoutProperties","_excluded","uuid","useId","concat","labelId","feedbackId","helpTextId","_useState","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","props2","arguments","length","undefined","forwardedRef","_objectSpread","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_excluded2","className","cx","jsx","chakra","__css","displayName","field","helperText","useFormControl","_useFormControlProps","_a","_b","_c","disabled","readOnly","required","rest","labelIds","push","join","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size"],"sourceRoot":""}